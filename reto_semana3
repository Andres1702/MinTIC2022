"""
distancias = {('H', 'H'): 0, ('H', 'A'): 21, ('H', 'B'): 0, ('H', 'C'): 58, ('H', 'D'): 195, ('H', 'E'): 245, ('H', 'F'): 241,
    ('A', 'H'): 127, ('A', 'A'): 0, ('A', 'B'): 231, ('A', 'C'): 113, ('A', 'D'): 254, ('A', 'E'): 179, ('A', 'F'): 41,
    ('B', 'H'): 153, ('B', 'A'): 252, ('B', 'B'): 0, ('B', 'C'): 56, ('B', 'D'): 126, ('B', 'E'): 160, ('B', 'F'): 269,
    ('C', 'H'): 196, ('C', 'A'): 128, ('C', 'B'): 80, ('C', 'C'): 0, ('C', 'D'): 136, ('C', 'E'): 37, ('C', 'F'): 180,
    ('D', 'H'): 30, ('D', 'A'): 40, ('D', 'B'): 256, ('D', 'C'): 121, ('D', 'D'): 0, ('D', 'E'): 194, ('D', 'F'): 109,
    ('E', 'H'): 33, ('E', 'A'): 144, ('E', 'B'): 179, ('E', 'C'): 114, ('E', 'D'): 237, ('E', 'E'): 0, ('E', 'F'): 119,
    ('F', 'H'): 267, ('F', 'A'): 61, ('F', 'B'): 79, ('F', 'C'): 39, ('F', 'D'): 135, ('F', 'E'): 55, ('F', 'F'): 0}
    
    ruta_inicial = ['H', 'A', 'B', 'C', 'D', 'E', 'F', 'H']
    
    Validación. Para este reto, usted debe verificar que todas las distancias del diccionario que entra por parámetro sean
    positivas ó cero en el caso de las distancias entre dos lugares iguales. En cualquier otro caso retorne una cadena
    reportando el siguiente mensaje de error “Por favor revisar los datos de entrada.”
   
    Requerimiento. Escriba una función (ruteo) que reciba cómo parámetros: Un diccionario (distancias) en el cuál para una
    llave (i, j) el valor correspondiente es la distancia que hay entre el lugar i y el lugar j. Y una lista (ruta_inicial) la cual
    contiene el orden de visita de los distintos puntos de la ciudad según la ruta actual. Con esta información, realice el
    procedimiento que se enuncia a continuación:
    En cada iteración usted debe evaluar todos los posibles intercambios de dos paradas en la ruta para finalmente
    actualizarla con aquel intercambio que genere la mayor reducción en la distancia total recorrida. Una vez actualizada la
    ruta, debe pasar a la siguiente iteración y repetir completamente este proceso hasta que no se encuentren mejoras
    adicionales (criterio de parada). Entonces, retorne un diccionario con las llaves “ruta” y “distancia” dónde, el valor
    correspondiente a la primera llave sea una cadena que codifique la ruta final encontrada con las paradas separadas por
    guiones y el valor correspondiente a la segunda llave sea un entero con la distancia total asociada a la ruta reportada.
    Note qué Debido a la configuración vial, la distancia que se debe recorrer para ir en automóvil de un lugar i a un lugar j no
    necesariamente será la misma distancia que se debe recorrer para ir del lugar j al lugar i (ida y vuelta no son equivalentes).
    Independientemente de esto, la ruta siempre debe iniciar y terminar el depósito
 """
def ruteo(distancias: dict, ruta_inicial: list)-> dict:

    if  validarDicEntrada(distancias):
        clon_ruta_inicial=ruta_inicial.copy()
        distanciaRutaIni = SumaRutaInicial(ruta_inicial,distancias)
        
        
        distanciaRutaIni = SumaRutaInicial(ruta_inicial, distancias)
        i=1
         
        while i <= len(ruta_inicial) - 2:
             origenTupla = ruta_inicial[i]
             j = i + 1
        
             while j <= len(ruta_inicial) - 2:
                 destinoTupla = ruta_inicial[j]
                 ambasTuplas = (origenTupla,destinoTupla)
                 nuevaRuta = intercambioRuta(ambasTuplas,clon_ruta_inicial)
                 distanciaNuevaRuta = SumaRutaInicial(nuevaRuta,distancias)
                 
                 if distanciaNuevaRuta < distanciaRutaIni:
                     rutaOK= nuevaRuta
                     distanciaOK = distanciaNuevaRuta
                     distanciaRutaIni = distanciaOK
                     bandera = True
                 j += 1
             i += 1
             if bandera and i == len(ruta_inicial) - 2:
                 i = 1
                 clon_ruta_inicial = rutaOK.copy()
                 bandera = False
             if not bandera and i == len(ruta_inicial) - 2:
                 ruta_esperada = '-'.join(clon_ruta_inicial) 
                 return {'ruta': ruta_esperada, 'distancia': distanciaOK}
    
    
    
    else:
        return "Por favor revisar los datos de entrada."
    
    

    
    #Validacion las distancias del diccionario que entra por parámetro sean positivas ó cero en el caso de las distancias entre dos lugares iguales
def validarDicEntrada(distancias):
    
    for key,value in distancias.items():
        if value >= 0:
            if key[0]==key[1]:
                Origen=key[0]
                Destino=key[1]
                comparacionllaves= (Origen,Destino)
                if distancias[comparacionllaves]==0:
                    flag=True
                else: 
                    return False
                
        else: 
            return False
        
    return flag
    
#Sumar Ruta inicial
def SumaRutaInicial(ruta_inicial,distancias):
    

    i=0
    
    sumaRutaI=0
    while  i <= len(ruta_inicial)-1:
      
         origenTupla= ruta_inicial[i]
         destinoTupla= ruta_inicial[i+1]
         tupla_origenDestino= (origenTupla,destinoTupla)
         sumaRutaI= sumaRutaI+distancias[tupla_origenDestino]
         i=i+1
         if (i== len(ruta_inicial)-1):
              i=len(ruta_inicial)+1
    return sumaRutaI
#intercambiar a mejor ruta

def intercambioRuta(tupla_origenDestino,rutaX): # parametros de entrada son una pareja y una ruta

    MejorRuta= rutaX.copy()
    indiOrigenTupla = MejorRuta.index(tupla_origenDestino[0])
    indDestinoTupla = MejorRuta.index(tupla_origenDestino[1])
    MejorRuta[indiOrigenTupla] = tupla_origenDestino[1]
    MejorRuta[indDestinoTupla] = tupla_origenDestino[0]
    return MejorRuta
"""
        PRUEBAS RETO:

print(ruteo({('H', 'H'): 0, ('H', 'A'): 21, ('H', 'B'): 57, ('H', 'C'): 58, ('H', 'D'): 195, ('H', 'E'): 245, ('H', 'F'): 241,
('A', 'H'): 127, ('A', 'A'): 0, ('A', 'B'): 231, ('A', 'C'): 113, ('A', 'D'): 254, ('A', 'E'): 179, ('A', 'F'): 41,
('B', 'H'): 153, ('B', 'A'): 252, ('B', 'B'): 0, ('B', 'C'): 56, ('B', 'D'): 126, ('B', 'E'): 160, ('B', 'F'): 269,
('C', 'H'): 196, ('C', 'A'): 128, ('C', 'B'): 80, ('C', 'C'): 0, ('C', 'D'): 136, ('C', 'E'): 37, ('C', 'F'): 180,
('D', 'H'): 30, ('D', 'A'): 40, ('D', 'B'): 256, ('D', 'C'): 121, ('D', 'D'): 0, ('D', 'E'): 194, ('D', 'F'): 109,
('E', 'H'): 33, ('E', 'A'): 144, ('E', 'B'): 179, ('E', 'C'): 114, ('E', 'D'): 237, ('E', 'E'): 0, ('E', 'F'): 119,
('F', 'H'): 267, ('F', 'A'): 61, ('F', 'B'): 79, ('F', 'C'): 39, ('F', 'D'): 135, ('F', 'E'): 55, ('F', 'F'): 0},
            ['H', 'A', 'B', 'C', 'D', 'E', 'F', 'H']
))

DEBE RETORNAR  
{'ruta': 'H-A-F-B-D-C-E-H', 'distancia': 458}

 
print(ruteo({('H', 'H'): 0, ('H', 'A'): 60, ('H', 'B'): 202, ('H', 'C'): 206, ('H', 'D'): 40, ('H', 'E'): 27,
('A', 'H'): 72, ('A', 'A'): 0, ('A', 'B'): 135, ('A', 'C'): 150, ('A', 'D'): 240, ('A', 'E'): 117,
('B', 'H'): 188, ('B', 'A'): 166, ('B', 'B'): 0, ('B', 'C'): 149, ('B', 'D'): 126, ('B', 'E'): 199,
('C', 'H'): 39, ('C', 'A'): 19, ('C', 'B'): 123, ('C', 'C'): 0, ('C', 'D'): 206, ('C', 'E'): 19,
('D', 'H'): 45, ('D', 'A'): 14, ('D', 'B'): 110, ('D', 'C'): 95, ('D', 'D'): 0, ('D', 'E'): 31,
('E', 'H'): 36, ('E', 'A'): 179, ('E', 'B'): 235, ('E', 'C'): 106, ('E', 'D'): 25, ('E', 'E'): 0},
          ['H', 'B', 'E', 'A', 'C', 'D', 'H']   
))

DEBE RETORNAR
{'ruta': 'H-D-A-B-C-E-H', 'distancia': 393}

 
print(ruteo({('BOG', 'BOG'): 0, ('BOG', 'MDE'): 21, ('BOG', 'PEI'): 57, ('BOG', 'SMR'): 58, ('BOG', 'CTG'): 195, ('MDE', 'BOG'): 127, ('MDE', 'MDE'): 0, ('MDE', 'PEI'): 231, ('MDE', 'SMR'): 113, ('MDE', 'CTG'): 254, ('PEI', 'BOG'): 153, ('PEI', 'MDE'): 252, ('PEI', 'PEI'): 0, ('PEI', 'SMR'): 56, ('PEI', 'CTG'): 126, ('SMR', 'BOG'): 196, ('SMR', 'MDE'): 128, ('SMR', 'PEI'): 80, ('SMR', 'SMR'): 0, ('SMR', 'CTG'): 136, ('CTG', 'BOG'): 30, ('CTG', 'MDE'): 40, ('CTG', 'PEI'): 256, ('CTG', 'SMR'): 121, ('CTG', 'CTG'): 0},['MDE', 'PEI', 'BOG', 'CTG', 'SMR', 'MDE']))

DEBE RETORNAR

{'ruta': 'MDE-SMR-PEI-CTG-BOG-MDE', 'distancia': 370}

print(ruteo({('H', 'H'): 0, ('H', 'A'): 60, ('H', 'B'): -5, ('H', 'C'): 206, ('H', 'D'): 40, ('H', 'E'): 27,
('A', 'H'): 72, ('A', 'A'): 0, ('A', 'B'): 135, ('A', 'C'): 150, ('A', 'D'): 240, ('A', 'E'): 117,
('B', 'H'): 188, ('B', 'A'): 166, ('B', 'B'): 0, ('B', 'C'): 149, ('B', 'D'): 126, ('B', 'E'): 199,
('C', 'H'): 39, ('C', 'A'): 19, ('C', 'B'): 123, ('C', 'C'): 0, ('C', 'D'): 206, ('C', 'E'): 19,
('D', 'H'): 45, ('D', 'A'): 14, ('D', 'B'): 110, ('D', 'C'): 95, ('D', 'D'): 0, ('D', 'E'): 31,
('E', 'H'): 36, ('E', 'A'): 179, ('E', 'B'): 235, ('E', 'C'): 106, ('E', 'D'): 25, ('E', 'E'): 0},
          ['H', 'B', 'E', 'A', 'C', 'D', 'H']   
))

DEBE RETORNAR
"Por favor revisar los datos de entrada."

print(ruteo({('H', 'H'): 0, ('H', 'A'): 60, ('H', 'B'): -5, ('H', 'C'): 206, ('H', 'D'): 40, ('H', 'E'): 27,
('A', 'H'): 72, ('A', 'A'): 50, ('A', 'B'): 135, ('A', 'C'): 150, ('A', 'D'): 240, ('A', 'E'): 117,
('B', 'H'): 188, ('B', 'A'): 166, ('B', 'B'): 0, ('B', 'C'): 149, ('B', 'D'): 126, ('B', 'E'): 199,
('C', 'H'): 39, ('C', 'A'): 19, ('C', 'B'): 123, ('C', 'C'): 0, ('C', 'D'): 206, ('C', 'E'): 19,
('D', 'H'): 45, ('D', 'A'): 14, ('D', 'B'): 110, ('D', 'C'): 95, ('D', 'D'): 0, ('D', 'E'): 31,
('E', 'H'): 36, ('E', 'A'): 179, ('E', 'B'): 235, ('E', 'C'): 106, ('E', 'D'): 25, ('E', 'E'): 0},
          ['H', 'B', 'E', 'A', 'C', 'D', 'H']   
))

DEBE RETORNAR
"Por favor revisar los datos de entrada."
"""
